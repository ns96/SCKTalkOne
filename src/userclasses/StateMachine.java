/**
 * Your application code goes here<br>
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */


package userclasses;

import com.codename1.location.Location;
import com.codename1.location.LocationManager;
import generated.StateMachineBase;
import com.codename1.ui.*; 
import com.codename1.ui.events.*;
import com.codename1.ui.spinner.Picker;
import com.codename1.ui.util.Resources;
import com.codename1.util.StringUtil;
import com.instras.sck.SCKTalkDevice;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

/**
 *
 * @author Your name here
 */
public class StateMachine extends StateMachineBase {
    private SCKTalkDevice sckTalkDevice; // used for commincating to the SCK using classic bluetooth
        
    private Map devices;
    
    private boolean connected = false;

    private boolean onSimulator;
    
    private Form mainForm;
    
    private TextArea console;
    
    // indicates if the sck unit is running
    private boolean sckRunning = false;
    
    public StateMachine(String resFile) {
        super(resFile);
        // do not modify, write code in initVars and initialize class members there,
        // the constructor might be invoked too late due to race conditions that might occur
    }
    
    /**
     * this method should be used to initialize variables instead of
     * the constructor/class scope to avoid race conditions
     * @param res The resource file
     */
    @Override
    protected void initVars(Resources res) {
        sckTalkDevice = new SCKTalkDevice();
        
        devices = new HashMap();
        
        String os = System.getProperty("os.name");
        if (os != null && os.contains("Windows")) {
            System.out.println("Running on simulator");
            onSimulator = true;
        } else {
            onSimulator = false;
        }
    }
    
    @Override
    protected void beforeMain(Form f) {
        super.beforeMain(f); //To change body of generated methods, choose Tools | Templates.

        // the main form
        mainForm = f;

        // set the console text area
        console = findConsoleTextArea(f);
    }
    
    /**
     * Scan for Bluetooth BLE devices, otherwise just add a dummy 
     */
    protected void scan() {
        try {
            // work around for latest android update wich requires access to location
            // to scan for BLE devices. Why, I don't know?
            Location position = LocationManager.getLocationManager().getCurrentLocationSync();
            
            scanBluetoothSPPDevices();
        } catch (Exception ex) {
            // display an error dialog
            if(!onSimulator) {
                Dialog.show("BT ERROR", ex.toString(), "OK", null);
            } else {
                print("No BT Support: ", false);
            }
        }
    }
    
    /**
     * Scan for Bluetooth classic (SPP) devices
     */
    private void scanBluetoothSPPDevices() throws IOException {
        // find the avalilable bluetooth devices
        java.util.List<String> foundList = sckTalkDevice.getDevices();
        
        Picker addressPicker = findBtPicker();
        if(!foundList.isEmpty()) {
            String[] addresses = foundList.toArray(new String[foundList.size()]);
            addressPicker.setStrings(addresses);
        } else {
            Dialog.show("BT ERROR", "No Bluetooth devices found ...", "OK", null);
        }
    }
    
    // after the main display add the bluetooth addresses
    @Override
    protected void postMain(Form f) {
        scan();
    }
    
    /**
     * Connect to the Bluetooth adapter
     * @param c
     * @param event 
     */
    @Override
    protected void onMain_ConnectButtonAction(Component c, ActionEvent event) {
        java.util.List<String> btList = StringUtil.tokenize(findBtPicker().getSelectedString(), "||");
        String address = btList.get(1).trim();
        
        if(!connected) {
            connectSPP(address);
        }
    }
    
    /**
     * Method to connect to the Bluetooth SPP device and check to see if there is
     * a SCK unit attached to it
     * 
     * @param address 
     */
    private void connectSPP(String address) {
        sckTalkDevice.setAddress(address);
            
        sckTalkDevice.connect();
            
        if(sckTalkDevice.isConnected()) {        
            // check that we actually connected to a mim based SCK then initialize
            try {
                Thread.sleep(100);
                String data = sckTalkDevice.readData();
                
                if(data.contains("MIM") || data.contains("****")) {
                    int sckType = SCKTalkDevice.SCK_300;
                    if(findSck300PRadioButton().isSelected()) {
                        sckType = SCKTalkDevice.SCK_300P;
                    }
                
                    sckTalkDevice.initializeSCK(sckType);
                
                    print("SCK Connected@ " + address + "\n", false);
                    connected = true;
                } else {
                    print("NO SCK Unit@ " + address + "\n", false);
                    connected = false;
                }
            } catch(InterruptedException ex) {}
        } else {
            String data = sckTalkDevice.readData();
            print("Error@: " + address + "\n" + data, false);
            connected = false;
        }
    }
    
    /**
     * Print messages to the status textArea in the EDT thread
     * 
     * @param message
     * @param append Not used ... 
     */
    private void print(String text, boolean append) {
        Display.getInstance().callSerially(new Runnable() {
            @Override
            public void run() {
                if (append) {
                    String oldText = console.getText();
                    String newText = oldText + "\n" + text;

                    console.setText(newText);
                } else {
                    console.setText(text);
                }
            }
        });
    }
    
    
    @Override
    protected void onMain_StartButtonAction(Component c, ActionEvent event) {
        if(connected) {
            findSpeedLabel().setText("0000 RPM");
            findTimeLabel().setText("0000 SEC");
            
            String speed1 = findSpeed1TextField().getText();
            int time1 = Integer.parseInt(findTime1TextField().getText());
            String speed2 = findSpeed2TextField().getText();
            int time2 = Integer.parseInt(findTime2TextField().getText());
            
            // start thread to read the speed now
            sckRunning = true;
            startSCKRunThread(speed1, time1, speed2, time2);
        }
    }
    
    /**
     * Stop the motor
     * 
     * @param c
     * @param event 
     */
    @Override
    protected void onMain_StopButtonAction(Component c, ActionEvent event) {
        sckRunning = false;
    }
    
    /**
     * Method to start a thread which will update the User Interface every second
     * and keep track of the running time
     * 
     */
    private void startSCKRunThread(final String speed1, final int time1, final String speed2, final int time2) {
        Thread dataReadThread = new Thread("SCK Run Thread") {
            @Override
            public void run() {
                // get the labels for updating
                Label speedLabel = findSpeedLabel();
                Label timeLabel = findTimeLabel();
                
                boolean runningSpeed1 = true;
                String setSpeed = speed1;
                
                int currentTime = 0;
                int maxTime = time1;
                
                // start the motor
                sckTalkDevice.startMotor();
                sckTalkDevice.setSpeed(setSpeed);
                
                // start the loop to read and display data now
                while(sckRunning) {
                    // sleep for 1 second before reading data and updating UI
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {}
                    
                    currentTime++;
                    if(currentTime > maxTime) {
                        if(!speed2.equals("0") && runningSpeed1) {
                            setSpeed = speed2;
                            sckTalkDevice.setSpeed(setSpeed);
                            
                            currentTime = 0;
                            maxTime = time2;
                            runningSpeed1 = false;
                        } else {
                            break;
                        }
                    }
                    
                    // update UI with current speed and time
                    String sckSpeed = sckTalkDevice.getSpeed();
                    
                    try {
                        int speed = Integer.parseInt(sckSpeed);
                        String speedString = intPadLeftZeroes(speed, 4) + " RPM";
                        updateLabel(speedLabel, speedString);
                        
                        String timeString = intPadLeftZeroes(currentTime, 4) + " SEC";
                        updateLabel(timeLabel, timeString);                      
                    } catch(NumberFormatException nfe) {}
                    
                    print("SET Speed/Time: " + setSpeed + " / " + maxTime, false);
                    print("SCK Speed/Time: " + sckSpeed + " / " + currentTime, true);
                }
                
                // we no longer running
                sckRunning = false;
                sckTalkDevice.stopMotor();
                
                updateLabel(speedLabel, "CURRENT SPEED");
                updateLabel(timeLabel, "CURRENT TIME");
                
                print("SCK Stopped ...", false);
            }
        };
        dataReadThread.start();
    }
    
     /**
     * Method to update a label in the EDT thread
     * @param label
     * @param text 
     */
    private void updateLabel(final Label label, final String text) {
        Display.getInstance().callSerially(new Runnable() {
            public void run() {
                label.setText(text);
            }
        });
    }
    
    /**
     * Pad an integer with a certain number of zeroes
     * @param num
     * @param pad
     * @return 
     */
    public String intPadLeftZeroes(int num, int pad) {
        String result = String.valueOf(num);
        int length = result.length();
        if (length >= pad) {
            return result;
        }
        char[] z = new char[pad - length];
        for (int i = 0; i < z.length; i++) {
            z[i] = '0';
        }
        
        return "" + new String(z) + Integer.toString(num);
    }

}
